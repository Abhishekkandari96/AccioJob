/*
Alice's Contacts
Alice uses a Linked list as a phonebook to store her contacts. She has lost access to the head node of the list. She wants to delete a contact from her phonebook.

She has access to the pointer of the contact she wants to delete. Can you delete the contact for her?

Note Complete the given function. The input and output would be handled by the driver code.

All the contacts in the phonebook are unique.

The contact to be deleted is not the last in her phonebook

Input Format
The first line of input contains N, representing the number of contacts in the phonebook.

The second line of input contains N space-separated integers representing the contacts.

The third line of input contains a number X representing which contact is to be deleted.

Output Format
Delete the given contact. Printing of the answer after deletion will be handled by the driver code.

Example 1
Input

3
1 3 4
3
Output

1 4
Explanation

1->3->4
This is the list given in question. We are asked to delete '3', after which the list looks as shown.

Example 2
Input

4
1 2 3 4
2
Output

1 3 4
Explanation

1->2->3->4
This is list you are given in the question. We are asked to delete '2', after which the list looks as shown.

Constraints
1 <= N <= 100000

1 <= value of node <= 100000
*/

// alice contact-https://course.acciojob.com/idle?question=dae9f363-8990-4fae-95b6-acc980306a35
//****************************************************************************************************************************************************
import java.util.*;

class Node{
  int data ;
  Node next;
  Node(int d)
  {
    data = d;
    next = null;
  }
}

class Main{
  Node head;
  Node tail;
  
  void printList(Node head){
    Node tnode = head;
    while(tnode != null)
    {
      System.out.print(tnode.data+ " ");
      tnode = tnode.next;
    }
    System.out.println();
  }
  
  void addToTheLast(Node node){
    if(head == null)
    {
      head = node;
      tail = node;
    }
    else
    {
        tail.next = node;
        tail = node;
    }
  }
  
  Node searchContact(Node head, int k){
    Node current = head;
    while(current != null){
      if(current.data == k)
        break;
      current = current.next;
    }
  return current;
  }
  
  public static void main(String args[])
  {
    Scanner sc = new Scanner(System.in);
      int n = sc.nextInt();
      Main phoneBook = new Main();
      int a1=sc.nextInt();
      Node head= new Node(a1);
      phoneBook.addToTheLast(head);
      for (int i = 1; i < n; i++) {
      int a = sc.nextInt(); 
      phoneBook.addToTheLast(new Node(a));
    }
      int k = sc.nextInt();
      Node del = phoneBook.searchContact(phoneBook.head,k);
      Solution g = new Solution();
      if(del != null && del.next != null)
      {
        g.deleteContact(del);
      }
      phoneBook.printList(phoneBook.head);
  }
}

class Solution
{
  void deleteContact(Node contact){
   contact.data=contact.next.data;
	  contact.next=contact.next.next;
  }
}

