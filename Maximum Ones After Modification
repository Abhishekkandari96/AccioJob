//*******************************
Maximum Ones After Modification
Given a binary array A and a integer B , find the length of longest subsegment of ‘1’s possible by changing at most B ‘0’s.

Input Format
First line contains the size of array N.

Second line contains n-spaced integers represeting array A.

Thirs line contains an integer representing B.

Output Format
Return an integer denoting the length of the longest subsegment of ‘1’s possible by changing at most B ‘0’s.

Example 1
Input

7
1 0 0 1 1 0 1
1
Output

4
Explanation

After changing 6th integer in the array to 1, the array will become [1, 0, 0, 1, 1, 1, 1]. Length of longest subsegment of '1's is 4.

Example 2
Input

10
1 0 0 1 0 1 0 1 0 1
2
Output

5
Explanation

After changing 5th an 7th integer in the array to 1, the array will become [1, 0, 0, 1, 1, 1, 1, 1, 0, 1 ]. Length of longest subsegment of '1's is 5.

Constraints
1 <= N <= 10^5

0 <= A[i] <= 1

1 <= B <= 10^5

Topic Tags
//*****************************
import java.util.*;

class Accio {
	//approach-: sliding window - why -becuse we want longest length
	/*
 step 1-if arr[end]==0 ,increeement the count , 
 step 2-increment the end.
 step 3-if count >B then 
            1-if arr[start]==0, reduce the count;
			2-incremnt the start.
	*/
	
    public int longestOnes(int[] A, int B) {
          //Your code goes here
		int start=0;
		int end=0;
		int count=0;
		while(end<A.length){
			if(A[end]==0) count++;

			
			if(count>B){
				if(A[start]==0) count--;
				start++;
			}
			end++;
		}
		return end-start;
    }
}

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] A = new int[N];
    	for(int i=0;i<N;i++)
	    A[i] = sc.nextInt();
        int B = sc.nextInt();
        Accio Obj = new Accio();
        System.out.println(Obj.longestOnes(A, B));
    }
}
