//*************************************
Rotated Sorted Array Search
Given an array of integers A of size N and an integer B.

array A is rotated at some pivot unknown to you beforehand.

(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2 ).

You are given a target value, B, to search. If found in the array, print its index; otherwise, print -1.

You may assume no duplicate exists in the array.

Note

Array A was sorted in non-decreasing order before rotation.

You need to think of an O(log n) solution.

Input Format
The first line given is an integer N, denoting the size of array A.

The second line given is N integers, the elements of array A.

The third line given is the integer B.

Output Format
Print index of B in array A; otherwise, print -1.

Example 1
Input

8
4 5 6 7 0 1 2 3
4
Output

0
Explanation

Target 4 is found at index 0 in A.

Example 2
Input

4
5 17 100 3
6
Output

-1
Explanation

6 is not present in the array.

Constraints
1 <= N <= 1000000

1 <= A[i] <= 10^9

all elements in A are distinct.

Topic Tags

//**************************************

import java.util.*;
import java.lang.*;
import java.io.*;

class Main {
  public static void main (String[] args)
	{
    Scanner sc = new Scanner(System.in);
	    
	  int N = sc.nextInt();
	  int[] A = new int[N];
	  for(int i=0;i<N;i++){
          A[i] = sc.nextInt();
      }
	  int B = sc.nextInt();
	  Solution ob = new Solution();
    System.out.println(ob.search(A,B));
		
	}
}

class Solution{
	/*Approach= steps->1-find pivot point->2-divide the array across pivot 3-apply binary search in both the halsf
	condition to find pivot-> if (mid+1<mid) return mid+1;
	                          if (mid<mid-1); return mid;
						      if()
						   
	*/
	public int pivot(int arr[]){
	    	int start=0;
		int last=arr.length-1;
		int pivot=-1;
		while(start<=last){
			int mid=(start+last)/2;
			if(arr[mid+1]<arr[mid]){
				pivot=mid+1;
				break;
			}
			else if(arr[mid]<arr[mid-1]){
				pivot=mid;
					break;
			}
			else if(arr[start]<arr[mid]){
				start=mid+1;
				
			}
			else{
				last=mid-1;
			}
		}
		
		return pivot;
	}
	public int simpleBinarySearch(int arr[],int target,int start,int end){
	   
	    while(start<=end){
	        int mid=(start+end)/2;
	        if(arr[mid]==target){
	            return mid;
	        }
	        else if(arr[mid]<target){
	            start=mid+1;
	        }
	        else if(arr[mid]>target){
	            end=mid-1;
	        }
	    }
	    return -1;
	}
    public int search( int[] arr, int target) {
		
		//if array has only one element
		if(arr.length==1){
			if(arr[0]==target){
				return 0;
			}else{
				return -1;
			}
		}
        
		//finding pivot
        int pivot=pivot(arr);
       
		//if pivot -1 apply simple binary search
        if(pivot==-1){
           
			//calling binary search from 0 to n,
            return simpleBinarySearch(arr,target,0,arr.length-1);
        }
        else{
           
			//calling for left search from 0 to pivot-1
            int leftEle= simpleBinarySearch(arr,target,0,pivot-1);
            
			//calling for right search from pivot to n
            int rightEle=simpleBinarySearch(arr,target,pivot,arr.length-1);
            
            //if we get element in left
            if(leftEle>-1){
                return leftEle;
            }
            //if we get element in right
            else if(rightEle>-1){
                return rightEle;
            }
            //not present in array
            else{
                return -1;
            }
            
        }
    }
}
