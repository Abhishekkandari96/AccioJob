//*******************************************************************
Unfold the Linked List
A linked list L0 -> L1 -> L2 -> ….. -> LN can be folded as L0 -> LN -> L1 -> LN – 1 -> L2 -> ….. and so on.

Given a folded linked list, the task is to unfold and print the original linked list.

Input Format
First line contains n, number of nodes in the linked list.

Second line contains the nodes of the linked list.

Output Format
Print the unfolded linked list from the folded linked list given.

Example 1
Input

6
1 6 2 5 3 4 
Output

1 2 3 4 5 6
Example 2
Input

5
1 5 2 4 3 
Output

1 2 3 4 5
Constraints
1 <= n <= 1000
//*******************************************************************

import java.io.*;
import java.util.*;
 
class Node{
    int data;
    Node next;
    Node(int data){
        this.data = data;
        next = null;
    }
}
class LinkedList{
    Node head;
    void add(int data ){
        Node new_node = new Node(data);
        if(head == null){
            head = new_node;
            return;
        }
        Node current = head;
        while(current.next !=null){
            current = current.next;
        }
        current.next = new_node;
    }
}

class Solution {
	static void print(Node head){
		while(head!=null){
			System.out.print(head.data+" ");
			head=head.next;
		}
	}
	static Node rev(Node head){
		Node curr=head;
		Node follow=head;
		Node pre=null;
		while(curr!=null){
			follow=follow.next;
			curr.next=pre;
			pre=curr;
			curr=follow;
		}
		return pre;
		
	}
    static void unfold(Node head)
    {

		Node first=head;
		Node second=head.next;
		Node c1=first;
		Node c2=second;
		while(c2!=null&& c2.next!=null){
			
			c1.next=null;
			c1.next=c2.next;
			c1=c1.next;

			c2.next=null;
			c2.next=c1.next;
			c2=c2.next;	
		}
		c1.next=null;
		second=rev(second);
		c1.next=second;
		print(first);
    }
}
public class Main {
    
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        LinkedList l1= new LinkedList();
        for(int i=0;i<n;i++){
            l1.add(sc.nextInt());
        }
        Solution Ob = new Solution();
        Ob.unfold(l1.head);
    }
}
