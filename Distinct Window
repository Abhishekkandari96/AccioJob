//***********************
Distinct Window
You are given a string s.

Your task is to find the smallest window of string with all distinct characters of the given string.

Input Format
First and only line of input contains a string s

Output Format
Return the smallest substring with all distinct characters of given string.

Example 1
Input

aabcbcdbca
Output

dbca
Explanation

Possible substrings= {aabcbcd, abcbcd, 
bcdbca, dbca....}
Of the set of possible substrings 'dbca' 
is the shortest substring having all the 
distinct characters of given string. 
Example 2
Input

aaab
Output

ab
Explanation

Possible substrings={aaab, aab, ab}
Of the set of possible substrings 'ab' 
is the shortest substring having all 
the distinct characters of given string. 
Constraints
1<=|s|<=10^4

Topic Tags

//********************


import java.util.*;

public class Main {
    /*
    approach=
    1-hashmap;
    2-frequency array;
            step.1= count the no of distict char;
            step.2= initialise contract, expand for itteration
            step.3= initialise unique to count no of unique char;
            step.4= initialise start and end for returnind minimum window unque char substring;
            step.5= initialise freq array;
            step.5=loop strt while(expand<str.length()){
                        1= expand
                        2= contract and calculation in same 
                             (a)-while(contract<expand && unique==k){
                                (i) //finding min (minimum) and calculating start and end index of substring
                                (ii) //checking is min is greater then current min(expand-contract) if true 
                                               //ininitialise min as new min
                                               //update startidx
                                               //update end index
                                (iii)//decrease frequency
                             (b)-checking if freq became zero reduce the unique char count
                             (c)-reduce window by increasing contract
            step.6= if no substring(min==maxVAlue) found return empty string else return substring from start index to end index
    */
    public static int distinct(String str){
         int freq[]=new int[26];
         int count=0;
         for(int i=0;i<str.length();i++){
             freq[str.charAt(i)-'a']++;
             if(freq[str.charAt(i)-'a']==1){
                 count++;
             }
         }
         return count;
    }

    public static String DistinctWindow(String str){
        //write code here
        int k=distinct(str);
        int contract=0;
        int expand=0;
        int unique=0;
        int startidx=0;
        int endidx=0;
        int min=Integer.MAX_VALUE;
        int freq[]=new int[26];
        while(expand<str.length()){
            
            //expand
            freq[str.charAt(expand)-'a']++;
            if(freq[str.charAt(expand)-'a']==1){
                unique++;
            }
            expand++;
            
            //contract and calculation in same 
            while(contract<expand && unique==k){
                //finding min (minimum) and calculating start and end index of substring
                //checking is min is greater then current min if true
                if(min>expand-contract){
                    //ininitialise new min
                    min=expand-contract;
                    //update startidx
                    startidx=contract;
                    //update end index
                    endidx=expand;
                }
                //decrease frequency
                freq[str.charAt(contract)-'a']--;
                //checking if freq became zero reduce the unique char count
                if(freq[str.charAt(contract)-'a']==0){
                    unique--;
                }
                //reduce window by increasing contract
                contract++;
                
            }
            
        }
        // if no substring found return empty string
        if(min==Integer.MAX_VALUE){
            return "";
        }
        //else return substring from start index to end index
        return str.substring(startidx,endidx);
    }

    public static void main(String[] args) throws Throwable {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        String ans = DistinctWindow(s);
        System.out.println(ans);
    }
}
