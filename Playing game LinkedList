//**********************************************************
Playing Game
Alice and Bob are playing with remote train which is given in the form of connected rail boxes written number over them. But due to fight between them, they broke rail in two parts and to join them again, Alice add one block and then bob provides one block. But mistakenly Bob starts providing blocks from the end of second part. Can you help Alice and Bob to determine how final train will look like.

eg:

Initial train: 1 -> 8 -> 5 -> 2 -> 9 -> 7

After fight:
        Alice Part: 1 -> 8 -> 5
        Bob Part: 2 -> 9 -> 7

Final train looks like: 1 -> 7 -> 8 -> 9 -> 5 -> 2.
You are given the initial train in the form of linked list, you need to find final train.

Input Format
A single integer n denoting length of linked list.

N space separated integers denoting the elements of linked list.

Output Format
For each test case return an array in a new line, denoting the values of the final Linked List.

Example 1
Input

4
1 2 3 4
Output

1 4 2 3
Explanation

The Initial List looks like:

1 -> 2 -> 3 -> 4
The list will be broken in two parts,

1 -> 2 and 3 -> 4
Recombining it:

1 -> 4 -> 2 -> 3
Example 2
Input

5
1 3 5 2 7
Output

1 7 3 2 5
Explanation

We break it into two lists

1 -> 3 -> 5 and 2->7
Recombining it:

1 7 3 2 5
Constraints
1 <= N <= 10000

1 <= L[i] <= 100000

//*********************************************************************
import java.util.*;

class Solution{
	public static Node rev(Node head){
		Node curr=head;
		Node follow=head;
		Node pre=null;
		while(curr!=null){
			follow=follow.next;
			curr.next=pre;
			pre=curr;
			curr=follow;
		}
		return pre;
	}
    public static Node correctOrder(Node head){
         //Write your code here
		Node slow=head;
		Node fast=head;
		while(fast!=null&& fast.next!=null){
			fast=fast.next.next;
			slow=slow.next;
		}
		Node rev=rev(slow);
		Node temp=head;
		while(temp.next.next!=null){
			
			temp=temp.next;
		}
		temp.next=null;
		Node dummy=new Node(0);
		temp=dummy;
		while(rev!=null && head!=null){
			Node c1=head.next;
			Node c2=rev.next;

			head.next=null;
			temp.next=head;
			temp=temp.next;

			rev.next=null;
			temp.next=rev;
			temp=temp.next;

			head=c1;
			rev=c2;
		}
		if(rev!=null){
			temp.next=rev;
		}
		if(head!=null){
			temp.next=head;
		}
		return dummy.next;
   
    }
}

public class Main {
    public static void main(String[] args) throws Throwable {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        LinkedList llist= new LinkedList(); 
        int a1=sc.nextInt();
        Node head= new Node(a1);
        llist.addToTheLast(head);
        for (int i = 1; i < n; i++) 
        {
            int a = sc.nextInt(); 
            llist.addToTheLast(new Node(a));
        }
            
        Solution A = new Solution();
        llist.head = A.correctOrder(llist.head);
        llist.printList();
        
    }
}

class Node{
    int data;
    Node next;
    Node(int d) {data = d; next = null; }
}
    
class LinkedList{
    Node head;  
    Node tail;
    public void addToTheLast(Node node) {
      if (head == null) {
       head = node;
       tail = node;
      }else {
       tail.next = node;
       tail = node;
      }
    }

    void printList(){
        Node temp = head;
        while (temp != null){
           System.out.print(temp.data+" ");
           temp = temp.next;
        }  
        System.out.println();
    }
}
