//*************************************
Find First and Last Position of Element in Sorted Array
Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.

If target is not found in the array, print[-1, -1].

You must write an algorithm with O(log n) runtime complexity.

Input Format
The first line contains two integers n (number of elements in the array) and target.

The second line contains n integers (value of elements in the array).

Output Format
Print two space separated integers denoting the first and last index of target.

Example 1
Input

 6 8
 5 7 7 8 8 10
Output

 3 4
Explanation

8 occurs for the first time at index 3 and at index 4 for the last time.

Example 2
Input

 6 6
 5 7 7 8 8 10
Output

 -1 -1
Explanation

6 doesn't occur in the given array, hence we return -1 -1

Constraints
0 <= nums.length <= 10^5

-10^9 <= nums[i] <= 10^9

nums is a non-decreasing array.

-10^9 <= target <= 10^9

Topic Tags

//*************************************
import java.util.*;
import java.lang.*;
import java.io.*;

public class Main
{
	public static  int lastOccur(int[] arr,int target){
        //approach=binary search
        int n=arr.length;
        int first=0;
        int last=n-1;
       int lastOcurr=-1;
       
        while(first<=last){
            int mid=(first+last)/2;
            if(arr[mid]==target){
                lastOcurr=mid;
                first=mid+1;
            }
            else if(arr[mid]>target){
                last=mid-1;
            }
            else{
                first=mid+1;
            }
        }
       return lastOcurr;
    }
    public static int firstOccur(int[] arr,int target){
        //approach=binary search
        int n=arr.length;
        int first=0;
        int last=n-1;
       int firstOcurr=-1;
       
        while(first<=last){
            int mid=(first+last)/2;
            if(arr[mid]==target){
                firstOcurr=mid;
                last=mid-1;
            }
            else if(arr[mid]>target){
                last=mid-1;
            }
            else{
                first=mid+1;
            }
        }
       return firstOcurr;
    }
        public static void firstAndLastPosition(int arr[],int n,int target){
       int  first=firstOccur( arr, target);
       int  last=lastOccur( arr, target);
       System.out.println(first+" "+last);
                
        }
	public static void main (String[] args) throws java.lang.Exception
	{
		Scanner in=new Scanner(System.in);
                int n=in.nextInt();
                int target=in.nextInt();
                int[] arr=new int[n];
                for(int i=0;i<n;i++){
                        arr[i]=in.nextInt();
                }
                firstAndLastPosition( arr, n, target);
	}
}
