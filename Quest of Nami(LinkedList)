//************************************************************************************************************************************************
The quest of Nami
Nami has found a series of treasure chests represented by nodes of a linked list. There are N (even) treasure chests. Unluckily she can not choose to keep all the treasure.

If Nami chooses to keep the ith (0 indexed) treasure, she gets the n-i-1 th treasure as well if 0 <= i <= (n / 2) - 1.

She can take home only one pair of a treasure chests. Can you help her maximize the treasure?

Note Complete the given function. The input and output would be handled by the driver code.

Input Format
The first line contains a single integer N representing the number of treasure chests.

The following line contains N integers representing the value of each treasure.

Output Format
Return the maximum treasure obtainable.

Example 1
Input

4
1 2 3 5
Output

6
Explanation

1 + 5 = 6 and 2 + 3 = 5. Since, 6 is the maximum possible, it is our answer.

Example 2
Input

2
2 3
Output

5
Explanation

2 + 3 = 5 is the only possible answer.

Constraints
1 <= N <= 10000



//************************************************************************************************************************************************
import java.util.*;
class Node {
    int data;
    Node next;

    Node(int d) {
        data = d;
        next = null;
    }
}

class Main{
    static void printList(Node n){
        while(n!=null){
            System.out.print(n.data+" ");
            n = n.next;
        }
        System.out.println();
    }
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int data = sc.nextInt();
        Node first = new Node(data);
        Node tail = first;
        for(int i=0; i<n-1; i++)
        {
            data = sc.nextInt();
            tail.next = new Node(data);
            tail = tail.next;
        }
        Solution g = new Solution();
        int res = g.solve(first);
        System.out.println(res);
    }
}

class Solution{   
	static Node rev(Node head){
		Node curr=head;
			Node follow=head;
		Node pre=null;
		while(curr!=null){
			follow=follow.next;
			curr.next=pre;
			pre=curr;
			curr=follow;
		}
		return pre;
	}
    static int solve(Node head)
    {
       //your code here
		Node dummy=new Node (0);
		Node dtemp=dummy;
		Node temp=head;
		while(temp!=null){
			dtemp.next=new Node(temp.data);
			dtemp=dtemp.next;
			temp=temp.next;
		}
		dummy=dummy.next;
		dummy=rev(dummy);
		int max=Integer.MIN_VALUE;
		while(dummy!=null){
			max=Integer.max(dummy.data+head.data,max);
			dummy=dummy.next;
			head=head.next;
		}
		return max;
    }
}
